// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  username  String     @unique
  fullName  String?
  email     String     @unique
  password  String
  refreshToken String?
  avatar    String?    // Optional
  bio       String?    // Optional
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relationships
  communitiesCreated Community[] @relation("AdminOfCommunity")
  communityMemberships CommunityMember[]
  comments   Comment[]
  likes      Like[]
  messages   Message[] @relation("SenderMessages")
  receivedMessages Message[] @relation("ReceiverMessages")
  chatRooms  ChatRoom[] @relation("ChatParticipants")
  calls      CallParticipant[]

  @@map("users")
}

model Community {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?          // Optional
  avatar      String?          // Optional
  companyName String           
  adminId     Int
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  admin       User             @relation("AdminOfCommunity", fields: [adminId], references: [id])
  members     CommunityMember[]
  posts       Post[]

  @@map("communities")
}

model CommunityMember {
  id          Int       @id @default(autoincrement())
  communityId Int
  userId      Int
  joinedAt    DateTime  @default(now())

  community   Community @relation(fields: [communityId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@unique([communityId, userId]) // Prevent duplicate memberships
  @@map("community_members")
}

model Post {
  id          Int        @id @default(autoincrement())
  heading     String
  description String
  file        String?    // Optional
  userId      Int
  communityId Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  community   Community  @relation(fields: [communityId], references: [id])
  comments    Comment[]
  likes       Like[]

  @@map("posts")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  postId    Int
  userId    Int
  createdAt DateTime @default(now())

  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("comments")
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@unique([userId, postId]) // Prevent duplicate likes
  @@map("likes")
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  senderId  Int
  receiverId Int?
  chatRoomId Int?
  sentAt    DateTime @default(now())

  // Relationships
  sender    User     @relation("SenderMessages", fields: [senderId], references: [id])
  receiver  User?    @relation("ReceiverMessages", fields: [receiverId], references: [id])
  chatRoom  ChatRoom? @relation(fields: [chatRoomId], references: [id])

  @@map("messages")
}

model ChatRoom {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())

  // Relationships
  participants User[]   @relation("ChatParticipants")
  messages     Message[]

  @@map("chat_rooms")
}

model Call {
  id          Int                @id @default(autoincrement())
  callType    String             // e.g., "audio" or "video"
  initiatedAt DateTime           @default(now())

  // Relationships
  participants CallParticipant[]

  @@map("calls")
}

model CallParticipant {
  id      Int   @id @default(autoincrement())
  callId  Int
  userId  Int

  call    Call  @relation(fields: [callId], references: [id])
  user    User  @relation(fields: [userId], references: [id])

  @@map("call_participants")
}